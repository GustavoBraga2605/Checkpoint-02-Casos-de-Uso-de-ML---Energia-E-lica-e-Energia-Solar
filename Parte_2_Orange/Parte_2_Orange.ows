<?xml version='1.0' encoding='utf-8'?>
<scheme version="2.0" title="" description="">
	<nodes>
		<node id="0" name="CSV File Import" qualified_name="Orange.widgets.data.owcsvimport.OWCSVFileImport" project_name="Orange3" version="" title="CSV File Import" position="(92.0, 140.0)" />
		<node id="1" name="Impute" qualified_name="Orange.widgets.data.owimpute.OWImpute" project_name="Orange3" version="" title="Impute" position="(362.0, 138.0)" />
		<node id="2" name="Select Columns" qualified_name="Orange.widgets.data.owselectcolumns.OWSelectAttributes" project_name="Orange3" version="" title="Select Columns" position="(239.0, 141.0)" />
		<node id="3" name="kNN" qualified_name="Orange.widgets.model.owknn.OWKNNLearner" project_name="Orange3" version="" title="kNN" position="(558.0, 61.0)" />
		<node id="4" name="Random Forest" qualified_name="Orange.widgets.model.owrandomforest.OWRandomForest" project_name="Orange3" version="" title="Random Forest" position="(560.0, 187.0)" />
		<node id="5" name="Logistic Regression" qualified_name="Orange.widgets.model.owlogisticregression.OWLogisticRegression" project_name="Orange3" version="" title="Logistic Regression" position="(567.0, 280.0)" />
		<node id="6" name="Predictions" qualified_name="Orange.widgets.evaluate.owpredictions.OWPredictions" project_name="Orange3" version="" title="Predictions" position="(750.0, 147.0)" />
		<node id="7" name="Python Script" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" project_name="Orange3" version="" title="Python Script" position="(922.0, 148.0)" />
		<node id="8" name="Save Data" qualified_name="Orange.widgets.data.owsave.OWSave" project_name="Orange3" version="" title="Save Data" position="(871.0, 233.0)" />
	</nodes>
	<links>
		<link id="0" source_node_id="0" sink_node_id="2" source_channel="Data" sink_channel="Data" enabled="true" source_channel_id="data" sink_channel_id="data" />
		<link id="1" source_node_id="2" sink_node_id="1" source_channel="Data" sink_channel="Data" enabled="true" source_channel_id="data" sink_channel_id="data" />
		<link id="2" source_node_id="1" sink_node_id="3" source_channel="Data" sink_channel="Data" enabled="true" source_channel_id="data" sink_channel_id="data" />
		<link id="3" source_node_id="1" sink_node_id="4" source_channel="Data" sink_channel="Data" enabled="true" source_channel_id="data" sink_channel_id="data" />
		<link id="4" source_node_id="1" sink_node_id="5" source_channel="Data" sink_channel="Data" enabled="true" source_channel_id="data" sink_channel_id="data" />
		<link id="5" source_node_id="1" sink_node_id="6" source_channel="Data" sink_channel="Data" enabled="true" source_channel_id="data" sink_channel_id="data" />
		<link id="6" source_node_id="3" sink_node_id="6" source_channel="Model" sink_channel="Predictors" enabled="true" source_channel_id="model" sink_channel_id="predictors" />
		<link id="7" source_node_id="4" sink_node_id="6" source_channel="Model" sink_channel="Predictors" enabled="true" source_channel_id="model" sink_channel_id="predictors" />
		<link id="8" source_node_id="5" sink_node_id="6" source_channel="Model" sink_channel="Predictors" enabled="true" source_channel_id="model" sink_channel_id="predictors" />
		<link id="9" source_node_id="6" sink_node_id="7" source_channel="Selected Predictions" sink_channel="Data" enabled="true" source_channel_id="selected_predictions" sink_channel_id="data" />
		<link id="10" source_node_id="6" sink_node_id="8" source_channel="Selected Predictions" sink_channel="Data" enabled="true" source_channel_id="selected_predictions" sink_channel_id="data" />
	</links>
	<annotations />
	<thumbnail />
	<node_properties>
		<properties node_id="0" format="literal">{'_session_items': [], '_session_items_v2': [({'type': 'AbsPath', 'path': 'C:/Users/labsfiap/Downloads/archive/smart_grid_stability_augmented.csv'}, {'encoding': 'utf-8', 'delimiter': ',', 'quotechar': '"', 'doublequote': True, 'skipinitialspace': True, 'quoting': 0, 'columntypes': [{'start': 0, 'stop': 14, 'value': 'Auto'}], 'rowspec': [{'start': 0, 'stop': 1, 'value': 'Header'}], 'decimal_separator': '.', 'group_separator': ''}), ({'type': 'AbsPath', 'path': 'C:/Users/labsfiap/Downloads/archive.zip'}, {'encoding': 'utf-8', 'delimiter': ',', 'quotechar': '"', 'doublequote': True, 'skipinitialspace': True, 'quoting': 0, 'columntypes': [{'start': 0, 'stop': 14, 'value': 'Auto'}], 'rowspec': [{'start': 0, 'stop': 1, 'value': 'Header'}], 'decimal_separator': '.', 'group_separator': ''})], 'compatibility_mode': False, 'controlAreaVisible': True, 'dialog_state': {'directory': 'C:/Users/labsfiap/Downloads/archive', 'filter': 'Text - comma separated (*.csv, *)'}, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x02\x1f\x00\x00\x00\xae\x00\x00\x037\x00\x00\x02\x04\x00\x00\x02 \x00\x00\x00\xcd\x00\x00\x036\x00\x00\x02\x03\x00\x00\x00\x00\x00\x00\x00\x00\x05V\x00\x00\x02 \x00\x00\x00\xcd\x00\x00\x036\x00\x00\x02\x03', '__version__': 3}</properties>
		<properties node_id="1" format="pickle">gASV1QIAAAAAAAB9lCiMFV9kZWZhdWx0X21ldGhvZF9pbmRleJRLAowKYXV0b2NvbW1pdJSIjBJj
b250cm9sQXJlYVZpc2libGWUiIwVZGVmYXVsdF9udW1lcmljX3ZhbHVllEcAAAAAAAAAAIwMZGVm
YXVsdF90aW1llEsAjBNzYXZlZFdpZGdldEdlb21ldHJ5lENCAdnQywADAAAAAAGoAAAAWwAAA64A
AAJrAAABqQAAAHoAAAOtAAACagAAAAAAAAAABVYAAAGpAAAAegAAA60AAAJqlIwLX192ZXJzaW9u
X1+USwGMEGNvbnRleHRfc2V0dGluZ3OUXZQojBVvcmFuZ2V3aWRnZXQuc2V0dGluZ3OUjAdDb250
ZXh0lJOUKYGUfZQojAZ2YWx1ZXOUfZQojBpfdmFyaWFibGVfaW1wdXRhdGlvbl9zdGF0ZZR9lEr8
////hpRoCEsBdYwKYXR0cmlidXRlc5R9lCiMBHRhdTGUSwKMBHRhdTKUSwKMBHRhdTOUSwKMBHRh
dTSUSwKMAnAxlEsCjAJwMpRLAowCcDOUSwKMAnA0lEsCjAJnMZRLAowCZzKUSwKMAmczlEsCjAJn
NJRLAowEc3RhYpRLAowFc3RhYmaUSwF1jAVtZXRhc5R9lHViaA0pgZR9lChoEH2UKGgSfZRK/P//
/4aUaAhLAXVoFX2UKIwEdGF1MZRLAowEdGF1MpRLAowEdGF1M5RLAowEdGF1NJRLAowCcDGUSwKM
AnAylEsCjAJwM5RLAowCcDSUSwKMAmcxlEsCjAJnMpRLAowCZzOUSwKMAmc0lEsCjARzdGFilEsC
dWglfZR1YmgNKYGUfZQoaBB9lChoEn2USvz///+GlGgISwF1aBV9lChoLUsCaC5LAmgvSwJoMEsC
aDFLAmgySwJoM0sCaDRLAmg1SwJoNksCaDdLAmg4SwKMBXN0YWJmlEsBdWglfZR1YmV1Lg==
</properties>
		<properties node_id="2" format="pickle">gASVrQIAAAAAAAB9lCiMC2F1dG9fY29tbWl0lIiMEmNvbnRyb2xBcmVhVmlzaWJsZZSIjBNpZ25v
cmVfbmV3X2ZlYXR1cmVzlImME3NhdmVkV2lkZ2V0R2VvbWV0cnmUQ0IB2dDLAAMAAAAAAX4AAAAd
AAAD1wAAApQAAAF/AAAAPAAAA9YAAAKTAAAAAAAAAAAFVgAAAX8AAAA8AAAD1gAAApOUjBJ1c2Vf
aW5wdXRfZmVhdHVyZXOUiYwLX192ZXJzaW9uX1+USwGMEGNvbnRleHRfc2V0dGluZ3OUXZSMFW9y
YW5nZXdpZGdldC5zZXR0aW5nc5SMB0NvbnRleHSUk5QpgZR9lCiMBnZhbHVlc5R9lCiMEWRvbWFp
bl9yb2xlX2hpbnRzlH2UKIwEdGF1MZRLAoaUjAlhdHRyaWJ1dGWUSwCGlIwEdGF1MpRLAoaUaBVL
AYaUjAR0YXUzlEsChpRoFUsChpSMBHRhdTSUSwKGlGgVSwOGlIwCcDGUSwKGlGgVSwSGlIwCcDKU
SwKGlGgVSwWGlIwCcDOUSwKGlGgVSwaGlIwCcDSUSwKGlGgVSweGlIwCZzGUSwKGlGgVSwiGlIwC
ZzKUSwKGlGgVSwmGlIwCZzOUSwKGlGgVSwqGlIwCZzSUSwKGlGgVSwuGlIwEc3RhYpRLAoaUaBVL
DIaUjAVzdGFiZpRLAYaUjAVjbGFzc5RLAIaUdUr+////hpRoB0sBdYwKYXR0cmlidXRlc5R9lCiM
BHRhdTGUSwKMBHRhdTKUSwKMBHRhdTOUSwKMBHRhdTSUSwKMAnAxlEsCjAJwMpRLAowCcDOUSwKM
AnA0lEsCjAJnMZRLAowCZzKUSwKMAmczlEsCjAJnNJRLAowEc3RhYpRLAowFc3RhYmaUSwF1jAVt
ZXRhc5R9lHViYXUu
</properties>
		<properties node_id="3" format="literal">{'auto_apply': True, 'controlAreaVisible': True, 'learner_name': '', 'metric_index': 0, 'n_neighbors': 5, 'savedWidgetGeometry': None, 'weight_index': 0, '__version__': 1}</properties>
		<properties node_id="4" format="literal">{'auto_apply': True, 'class_weight': False, 'controlAreaVisible': True, 'index_output': 0, 'learner_name': '', 'max_depth': 3, 'max_features': 5, 'min_samples_split': 5, 'n_estimators': 10, 'savedWidgetGeometry': None, 'use_max_depth': False, 'use_max_features': False, 'use_min_samples_split': True, 'use_random_state': False, '__version__': 1}</properties>
		<properties node_id="5" format="literal">{'C_index': 61, 'auto_apply': True, 'class_weight': False, 'controlAreaVisible': True, 'learner_name': '', 'penalty_type': 1, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x02?\x00\x00\x00\xc9\x00\x00\x03\x16\x00\x00\x01\xfe\x00\x00\x02@\x00\x00\x00\xe8\x00\x00\x03\x15\x00\x00\x01\xfd\x00\x00\x00\x00\x00\x00\x00\x00\x05V\x00\x00\x02@\x00\x00\x00\xe8\x00\x00\x03\x15\x00\x00\x01\xfd', '__version__': 2}</properties>
		<properties node_id="6" format="pickle">gASV+wIAAAAAAAB9lCiMEmNvbnRyb2xBcmVhVmlzaWJsZZSIjBNzYXZlZFdpZGdldEdlb21ldHJ5
lENCAdnQywADAAD/////////+AAABVYAAALQAAAAAAAAABcAAAVVAAACzwAAAAACAAAABVYAAAAA
AAAAFwAABVUAAALPlIwJc2VsZWN0aW9ulF2UjAtzaG93X3Njb3Jlc5SIjAtzY29yZV90YWJsZZR9
lIwQc2hvd19zY29yZV9oaW50c5R9lCiMBk1vZGVsX5SIjAZUcmFpbl+UiYwFVGVzdF+UiYwCQ0GU
iIwXUHJlY2lzaW9uUmVjYWxsRlN1cHBvcnSUiIwLVGFyZ2V0U2NvcmWUiIwJUHJlY2lzaW9ulIiM
BlJlY2FsbJSIjAJGMZSIjANBVUOUiIwHTG9nTG9zc5SJjAtTcGVjaWZpY2l0eZSJjBdNYXR0aGV3
c0NvcnJDb2VmZmljaWVudJSIjANNU0WUiIwEUk1TRZSIjANNQUWUiIwETUFQRZSIjAJSMpSIjAZD
VlJNU0WUiYwPQ2x1c3RlcmluZ1Njb3JllIiMClNpbGhvdWV0dGWUiIwXQWRqdXN0ZWRNdXR1YWxJ
bmZvU2NvcmWUiHVzjAtfX3ZlcnNpb25fX5RLAowQY29udGV4dF9zZXR0aW5nc5RdlCiMFW9yYW5n
ZXdpZGdldC5zZXR0aW5nc5SMB0NvbnRleHSUk5QpgZR9lCiMBnZhbHVlc5R9lCiMF3Nob3dfcHJv
YmFiaWxpdHlfZXJyb3JzlIiMD3Nob3dfcmVnX2Vycm9yc5RLAIwLc2hvd25fcHJvYnOUSwGMDHRh
cmdldF9jbGFzc5SMFihBdmVyYWdlIG92ZXIgY2xhc3NlcymUaAd9lGghSwJ1jAdjbGFzc2VzlIwG
c3RhYmxllIwIdW5zdGFibGWUhpR1YmgmKYGUfZQoaCl9lChoK4hoLEsAaC1LAGgujBYoQXZlcmFn
ZSBvdmVyIGNsYXNzZXMplGgHfZRoIUsCdWgxKXViZXUu
</properties>
		<properties node_id="7" format="literal">{'controlAreaVisible': True, 'currentScriptIndex': 1, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\xff\xff\xff\xff\xff\xff\xff\xf8\x00\x00\x05V\x00\x00\x02\xd0\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x05U\x00\x00\x02\xcf\x00\x00\x00\x00\x02\x00\x00\x00\x05V\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x05U\x00\x00\x02\xcf', 'scriptLibrary': [{'name': 'New script', 'script': 'import numpy as np\nfrom Orange.data import Table, Domain, ContinuousVariable, DiscreteVariable\n\ndomain = Domain([ContinuousVariable("age"),\n                 ContinuousVariable("height"),\n                 DiscreteVariable("gender", values=("M", "F"))])\narr = np.array([\n  [25, 186, 0],\n  [30, 164, 1]])\nout_data = Table.from_numpy(domain, arr)\n\n\nfrom sklearn.metrics import accuracy_score, confusion_matrix, f1_score\n\nimport numpy as np\n \n# Valores reais (classe verdadeira)\n\ny_true = np.array(in_data.Y)\n \nresultados = []\n \n# Percorre todas as colunas de predição (cada modelo)\n\nfor col in in_data.domain.class_vars:\n\n    y_pred = np.array(in_data.get_column(col.name))\n\n    acc = accuracy_score(y_true, y_pred)\n\n    cm = confusion_matrix(y_true, y_pred)\n\n    f1 = f1_score(y_true, y_pred, average="weighted")\n\n    resultados.append((col.name, acc, f1, cm))\n \n    print(f"\\n=== Modelo: {col.name} ===")\n\n    print(f"Acurácia: {acc:.4f}")\n\n    print("Matriz de Confusão:")\n\n    print(cm)\n\n    print(f"F1-score: {f1:.4f}")\n \n# Seleciona o melhor modelo pelo F1-score\n\nmelhor_modelo = max(resultados, key=lambda x: x[2])\n\nprint("\\n===============================")\n\nprint(f"🏆 Melhor modelo: {melhor_modelo[0]}")\n\nprint(f"Acurácia: {melhor_modelo[1]:.4f}")\n\nprint(f"F1-score: {melhor_modelo[2]:.4f}")\n\nprint("Matriz de Confusão:")\n\nprint(melhor_modelo[3])\n\n ', 'filename': None}, {'name': 'New script', 'script': 'import numpy as np\nfrom Orange.data import Table, Domain, ContinuousVariable, DiscreteVariable\n\ndomain = Domain([ContinuousVariable("age"),\n                 ContinuousVariable("height"),\n                 DiscreteVariable("gender", values=("M", "F"))])\narr = np.array([\n  [25, 186, 0],\n  [30, 164, 1]])\nout_data = Table.from_numpy(domain, arr)\n\n\nfrom sklearn.metrics import accuracy_score, confusion_matrix, f1_score\n\nimport numpy as np\n \n# Valores reais (classe verdadeira)\n\ny_true = np.array(in_data.Y)\n \nresultados = []\n \n# Percorre todas as colunas de predição (cada modelo)\n\nfor col in in_data.domain.class_vars:\n\n    y_pred = np.array(in_data.get_column(col.name))\n\n    acc = accuracy_score(y_true, y_pred)\n\n    cm = confusion_matrix(y_true, y_pred)\n\n    f1 = f1_score(y_true, y_pred, average="weighted")\n\n    resultados.append((col.name, acc, f1, cm))\n \n    print(f"\\n=== Modelo: {col.name} ===")\n\n    print(f"Acurácia: {acc:.4f}")\n\n    print("Matriz de Confusão:")\n\n    print(cm)\n\n    print(f"F1-score: {f1:.4f}")\n \n# Seleciona o melhor modelo pelo F1-score\n\nmelhor_modelo = max(resultados, key=lambda x: x[2])\n\nprint("\\n===============================")\n\nprint(f"🏆 Melhor modelo: {melhor_modelo[0]}")\n\nprint(f"Acurácia: {melhor_modelo[1]:.4f}")\n\nprint(f"F1-score: {melhor_modelo[2]:.4f}")\n\nprint("Matriz de Confusão:")\n\nprint(melhor_modelo[3])\n\n ', 'filename': None}], 'scriptText': 'import numpy as np\nfrom Orange.data import Table, Domain, ContinuousVariable, DiscreteVariable\n\ndomain = Domain([ContinuousVariable("age"),\n                 ContinuousVariable("height"),\n                 DiscreteVariable("gender", values=("M", "F"))])\narr = np.array([\n  [25, 186, 0],\n  [30, 164, 1]])\nout_data = Table.from_numpy(domain, arr)\n\n\nfrom sklearn.metrics import accuracy_score, confusion_matrix, f1_score\n\nimport numpy as np\n \n# Valores reais (classe verdadeira)\n\ny_true = np.array(in_data.Y)\n \nresultados = []\n \n# Percorre todas as colunas de predição (cada modelo)\n\nfor col in in_data.domain.class_vars:\n\n    y_pred = np.array(in_data.get_column(col.name))\n\n    acc = accuracy_score(y_true, y_pred)\n\n    cm = confusion_matrix(y_true, y_pred)\n\n    f1 = f1_score(y_true, y_pred, average="weighted")\n\n    resultados.append((col.name, acc, f1, cm))\n \n    print(f"\\n=== Modelo: {col.name} ===")\n\n    print(f"Acurácia: {acc:.4f}")\n\n    print("Matriz de Confusão:")\n\n    print(cm)\n\n    print(f"F1-score: {f1:.4f}")\n \n# Seleciona o melhor modelo pelo F1-score\n\nmelhor_modelo = max(resultados, key=lambda x: x[2])\n\nprint("\\n===============================")\n\nprint(f"🏆 Melhor modelo: {melhor_modelo[0]}")\n\nprint(f"Acurácia: {melhor_modelo[1]:.4f}")\n\nprint(f"F1-score: {melhor_modelo[2]:.4f}")\n\nprint("Matriz de Confusão:")\n\nprint(melhor_modelo[3])\n\n ', 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x9f\x00\x00\x00`\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', 'vimModeEnabled': False, '__version__': 2}</properties>
		<properties node_id="8" format="literal">{'add_type_annotations': True, 'auto_save': False, 'controlAreaVisible': True, 'filter': 'Comma-separated values (*.csv)', 'savedWidgetGeometry': b"\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x028\x00\x00\x01\x08\x00\x00\x03p\x00\x00\x01\xa9\x00\x00\x029\x00\x00\x01'\x00\x00\x03o\x00\x00\x01\xa8\x00\x00\x00\x00\x00\x00\x00\x00\x05V\x00\x00\x029\x00\x00\x01'\x00\x00\x03o\x00\x00\x01\xa8", 'stored_name': 'Tabela CSV ORANGE EX 2.csv', 'stored_path': '.', '__version__': 3}</properties>
	</node_properties>
	<session_state>
		<window_groups />
	</session_state>
</scheme>
